/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package edu.csupomona.nlp.tool.crawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Use Amazon RESTful service to crawl user reviews
 * @author Xing
 */
public class Amazon {
    
    // RESTful service URL parts
    private static final String MAIN_URL = 
            "http://www.amazon.com/product-reviews/";
    private static final String NEXT_REST1 = 
            "/ref=cm_cr_pr_top_link_next_";
    private static final String NEXT_REST2 = 
            "?ie=UTF8&pageNumber=";
    private static final String NEXT_REST3 = 
            "&showViewpoints=0&sortBy=bySubmissionDateDescending";
    
    // regular expression pattern
    private static final Pattern REVIEW_PATTERN = 
            Pattern.compile("<div class=\"reviewText\">([\\w\\W]*?)</div>");

    public Amazon() {

    }

    private String getReviewUrl(String productId) {
        return MAIN_URL + productId;
    }

    private String getNextUrl(String baseUrl, Integer pageId) {
        return baseUrl + NEXT_REST1 + pageId.toString() 
                       + NEXT_REST2 + pageId.toString() 
                       + NEXT_REST3;
    }

    /**
     * Scape the review text given the base URL of the product
     * This will continuously crawl all the review pages until no more.
     * @param baseUrl       The base URL. Generated by getReviewUrl() method
     * @return              List contains every review text
     */
    private List<String> scapeReview(String baseUrl) {
        List<String> reviews = new ArrayList<>();
        try {
            Integer nPage = 1;
            URL url = new URL(baseUrl); // convert to URL
            while (true) {
                // open a connection to the specific page and read through it
                URLConnection connect = url.openConnection();
                Integer nReview = 0;
                try (BufferedReader br = new BufferedReader(
                        new InputStreamReader(connect.getInputStream()))) {
                    String line;

                    // parse the content of page and extract reviews
                    System.out.println("Parsing Page " + nPage + "...");
                    while ((line = br.readLine()) != null) {
                        // use matcher to match the review text
                        Matcher reviewMatcher = REVIEW_PATTERN.matcher(line);
                        
                        while (reviewMatcher.find()) {
                            String text = reviewMatcher.group(1);
                            
//                        text = Preprocessor.complex(text);  // should be put somewhere else
                            
                            reviews.add(text);
                            nReview++;
                        }
                    }
                }
                
                // when there's no more review text can be found, stop crawling
                if (nReview == 0) {
                    System.out.println("Done Parsing at Page " + nPage.toString());
                    break;
                }
                
                // generate URL of next page
                nPage++;
                url = new URL(getNextUrl(baseUrl, nPage));
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(Amazon.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Amazon.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return reviews;
    }

    /**
     * Crawl the review text given Amazon product id
     * @param productId     Amazon product id. 
     *                      Could be found in its RESTful URL.
     * @return              List contains every review text
     */
    public List<String> crawl(String productId) {		
        // generate base URL given Amazon product id
        String baseUrl = getReviewUrl(productId);
        
        // scape review text using base URL
        List<String> reviews = scapeReview(baseUrl);

        return reviews;
    }
}
